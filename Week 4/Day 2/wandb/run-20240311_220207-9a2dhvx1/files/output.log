[34m[1mwandb[39m[22m: Streaming LlamaIndex events to W&B at https://wandb.ai/arindam-ganguly83/aie1-llama-index-demo/runs/9a2dhvx1
[34m[1mwandb[39m[22m: `WandbCallbackHandler` is currently in beta.
[34m[1mwandb[39m[22m: Please report any issues to https://github.com/wandb/wandb/issues with the tag `llamaindex`.
INFO:chromadb.telemetry.product.posthog:Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 2eb7e668-7c20-4342-b625-533c73c26d5f
Insert of existing embedding ID: 2eb7e668-7c20-4342-b625-533c73c26d5f
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 4e69a488-36d1-4928-bf0e-7704b4832d5a
Insert of existing embedding ID: 4e69a488-36d1-4928-bf0e-7704b4832d5a
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: e8188dfb-8bb5-416c-8672-e2f1ad097db9
Insert of existing embedding ID: e8188dfb-8bb5-416c-8672-e2f1ad097db9
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 5691b425-e92a-49f3-b566-ea54ba374e80
Insert of existing embedding ID: 5691b425-e92a-49f3-b566-ea54ba374e80
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: b0ee36a6-ae03-4561-b87f-9b10f9357726
Insert of existing embedding ID: b0ee36a6-ae03-4561-b87f-9b10f9357726
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 236e894d-69e2-4f4d-b12e-aee8c291e43c
Insert of existing embedding ID: 236e894d-69e2-4f4d-b12e-aee8c291e43c
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: a77e85b7-6c0f-41f2-88a7-40d67c784895
Insert of existing embedding ID: a77e85b7-6c0f-41f2-88a7-40d67c784895
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 8c67849b-a26f-463b-a0c2-a3d15b8e63f7
Insert of existing embedding ID: 8c67849b-a26f-463b-a0c2-a3d15b8e63f7
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 2e7a6442-038a-4bbc-a604-b9614c9c3f50
Insert of existing embedding ID: 2e7a6442-038a-4bbc-a604-b9614c9c3f50
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: aba8d522-1e13-4dd1-bd9d-d0b32668343e
Insert of existing embedding ID: aba8d522-1e13-4dd1-bd9d-d0b32668343e
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: b52c593f-a3f7-485c-aa3b-4567d0e8328f
Insert of existing embedding ID: b52c593f-a3f7-485c-aa3b-4567d0e8328f
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 4b4c599a-08b6-4a1b-89e7-ef3f5d7fd245
Insert of existing embedding ID: 4b4c599a-08b6-4a1b-89e7-ef3f5d7fd245
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 4fe42426-3957-44a4-887f-f4f0aa6a3367
Insert of existing embedding ID: 4fe42426-3957-44a4-887f-f4f0aa6a3367
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 48b7f1e3-4bde-48df-8e72-b2437a8e6c3e
Insert of existing embedding ID: 48b7f1e3-4bde-48df-8e72-b2437a8e6c3e
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 55eab553-a0e0-4eb7-9012-ee5e506533d8
Insert of existing embedding ID: 55eab553-a0e0-4eb7-9012-ee5e506533d8
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: b060dea1-161a-42e1-a8f4-89b40d742e0a
Insert of existing embedding ID: b060dea1-161a-42e1-a8f4-89b40d742e0a
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: ab9ea738-c884-48d5-bc31-b4e6450e710c
Insert of existing embedding ID: ab9ea738-c884-48d5-bc31-b4e6450e710c
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 038d47fd-78d5-4ab0-85da-1aac5a5b10b1
Insert of existing embedding ID: 038d47fd-78d5-4ab0-85da-1aac5a5b10b1
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 2bb298a3-375d-407c-9245-a453154e57ca
Insert of existing embedding ID: 2bb298a3-375d-407c-9245-a453154e57ca
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: 1d545aad-a945-417b-a43f-83be7f03dc64
Insert of existing embedding ID: 1d545aad-a945-417b-a43f-83be7f03dc64
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: eddf574b-035e-4e3f-b7bb-f3eddba1e9fd
Insert of existing embedding ID: eddf574b-035e-4e3f-b7bb-f3eddba1e9fd
WARNING:chromadb.segment.impl.metadata.sqlite:Insert of existing embedding ID: c2b17ec5-e8d0-48e6-914d-9f1e946aa642
Insert of existing embedding ID: c2b17ec5-e8d0-48e6-914d-9f1e946aa642
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 2eb7e668-7c20-4342-b625-533c73c26d5f
Add of existing embedding ID: 2eb7e668-7c20-4342-b625-533c73c26d5f
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 4e69a488-36d1-4928-bf0e-7704b4832d5a
Add of existing embedding ID: 4e69a488-36d1-4928-bf0e-7704b4832d5a
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: e8188dfb-8bb5-416c-8672-e2f1ad097db9
Add of existing embedding ID: e8188dfb-8bb5-416c-8672-e2f1ad097db9
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 5691b425-e92a-49f3-b566-ea54ba374e80
Add of existing embedding ID: 5691b425-e92a-49f3-b566-ea54ba374e80
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: b0ee36a6-ae03-4561-b87f-9b10f9357726
Add of existing embedding ID: b0ee36a6-ae03-4561-b87f-9b10f9357726
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 236e894d-69e2-4f4d-b12e-aee8c291e43c
Add of existing embedding ID: 236e894d-69e2-4f4d-b12e-aee8c291e43c
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: a77e85b7-6c0f-41f2-88a7-40d67c784895
Add of existing embedding ID: a77e85b7-6c0f-41f2-88a7-40d67c784895
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 8c67849b-a26f-463b-a0c2-a3d15b8e63f7
Add of existing embedding ID: 8c67849b-a26f-463b-a0c2-a3d15b8e63f7
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 2e7a6442-038a-4bbc-a604-b9614c9c3f50
Add of existing embedding ID: 2e7a6442-038a-4bbc-a604-b9614c9c3f50
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: aba8d522-1e13-4dd1-bd9d-d0b32668343e
Add of existing embedding ID: aba8d522-1e13-4dd1-bd9d-d0b32668343e
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: b52c593f-a3f7-485c-aa3b-4567d0e8328f
Add of existing embedding ID: b52c593f-a3f7-485c-aa3b-4567d0e8328f
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 4b4c599a-08b6-4a1b-89e7-ef3f5d7fd245
Add of existing embedding ID: 4b4c599a-08b6-4a1b-89e7-ef3f5d7fd245
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 4fe42426-3957-44a4-887f-f4f0aa6a3367
Add of existing embedding ID: 4fe42426-3957-44a4-887f-f4f0aa6a3367
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 48b7f1e3-4bde-48df-8e72-b2437a8e6c3e
Add of existing embedding ID: 48b7f1e3-4bde-48df-8e72-b2437a8e6c3e
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 55eab553-a0e0-4eb7-9012-ee5e506533d8
Add of existing embedding ID: 55eab553-a0e0-4eb7-9012-ee5e506533d8
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: b060dea1-161a-42e1-a8f4-89b40d742e0a
Add of existing embedding ID: b060dea1-161a-42e1-a8f4-89b40d742e0a
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: ab9ea738-c884-48d5-bc31-b4e6450e710c
Add of existing embedding ID: ab9ea738-c884-48d5-bc31-b4e6450e710c
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 038d47fd-78d5-4ab0-85da-1aac5a5b10b1
Add of existing embedding ID: 038d47fd-78d5-4ab0-85da-1aac5a5b10b1
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 2bb298a3-375d-407c-9245-a453154e57ca
Add of existing embedding ID: 2bb298a3-375d-407c-9245-a453154e57ca
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: 1d545aad-a945-417b-a43f-83be7f03dc64
Add of existing embedding ID: 1d545aad-a945-417b-a43f-83be7f03dc64
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: eddf574b-035e-4e3f-b7bb-f3eddba1e9fd
Add of existing embedding ID: eddf574b-035e-4e3f-b7bb-f3eddba1e9fd
WARNING:chromadb.segment.impl.vector.local_hnsw:Add of existing embedding ID: c2b17ec5-e8d0-48e6-914d-9f1e946aa642
Add of existing embedding ID: c2b17ec5-e8d0-48e6-914d-9f1e946aa642
[34m[1mwandb[39m[22m: Adding directory to artifact (/Users/arindam/Desktop/AI-Makerspace-Class/AI-Engineering/Week 4/Day 2/wandb/run-20240311_220207-9a2dhvx1/files/storage)... Done. 0.1s
[34m[1mwandb[39m[22m:   4 of 4 files downloaded.
[{"name": "ChromaVectorStore", "type": "ModelMetaclass", "properties": ["Config", "_abc_impl", "_calculate_keys", "_collection", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get", "_get_value", "_init_private_attributes", "_iter", "_query", "add", "adelete", "aquery", "async_add", "class_name", "client", "construct", "copy", "delete", "dict", "from_collection", "from_dict", "from_json", "from_orm", "from_params", "json", "parse_file", "parse_obj", "parse_raw", "persist", "query", "schema", "schema_json", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "<class 'llama_index.vector_stores.chroma.base.ChromaVectorStore'>", "root": "ChromaVectorStore", "propertyChain": [], "language": "python"}, {"name": "IngestionPipeline", "type": "ModelMetaclass", "properties": ["Config", "_abc_impl", "_ahandle_duplicates", "_ahandle_upserts", "_calculate_keys", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_default_transformations", "_get_value", "_handle_duplicates", "_handle_upserts", "_init_private_attributes", "_iter", "_node_batcher", "_prepare_inputs", "arun", "construct", "copy", "dict", "from_orm", "from_pipeline_name", "json", "load", "parse_file", "parse_obj", "parse_raw", "persist", "register", "run", "run_remote", "schema", "schema_json", "update_forward_refs", "validate"], "value": "<class 'llama_index.core.ingestion.pipeline.IngestionPipeline'>", "root": "IngestionPipeline", "propertyChain": [], "language": "python"}, {"name": "OpenAI", "type": "ModelMetaclass", "properties": ["Config", "_abc_impl", "_achat", "_aclient", "_acomplete", "_as_query_component", "_astream_chat", "_astream_complete", "_calculate_keys", "_chat", "_client", "_complete", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_extend_messages", "_extend_prompt", "_get_aclient", "_get_client", "_get_credential_kwargs", "_get_messages", "_get_model_kwargs", "_get_model_name", "_get_prompt", "_get_response_token_counts", "_get_value", "_http_client", "_init_private_attributes", "_is_azure_client", "_iter", "_log_template_data", "_parse_output", "_stream_chat", "_stream_complete", "_tokenizer", "_update_max_tokens", "_update_tool_calls", "_use_chat_completions", "_validate_callback_manager", "achat", "acomplete", "apredict", "as_query_component", "astream", "astream_chat", "astream_complete", "astructured_predict", "chat", "check_prompts", "class_name", "complete", "construct", "copy", "dict", "from_dict", "from_json", "from_orm", "json", "metadata", "parse_file", "parse_obj", "parse_raw", "predict", "schema", "schema_json", "set_completion_to_prompt", "set_messages_to_prompt", "stream", "stream_chat", "stream_complete", "structured_predict", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "<class 'llama_index.llms.openai.base.OpenAI'>", "root": "OpenAI", "propertyChain": [], "language": "python"}, {"name": "OpenAIEmbedding", "type": "ModelMetaclass", "properties": ["Config", "_abc_impl", "_aclient", "_aget_query_embedding", "_aget_text_embedding", "_aget_text_embeddings", "_calculate_keys", "_client", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_aclient", "_get_client", "_get_credential_kwargs", "_get_query_embedding", "_get_text_embedding", "_get_text_embeddings", "_get_value", "_http_client", "_init_private_attributes", "_iter", "_query_engine", "_text_engine", "_validate_callback_manager", "acall", "aget_agg_embedding_from_queries", "aget_query_embedding", "aget_text_embedding", "aget_text_embedding_batch", "class_name", "construct", "copy", "dict", "from_dict", "from_json", "from_orm", "get_agg_embedding_from_queries", "get_query_embedding", "get_text_embedding", "get_text_embedding_batch", "json", "parse_file", "parse_obj", "parse_raw", "schema", "schema_json", "similarity", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "<class 'llama_index.embeddings.openai.base.OpenAIEmbedding'>", "root": "OpenAIEmbedding", "propertyChain": [], "language": "python"}, {"name": "Settings", "type": "_Settings", "properties": ["_callback_manager", "_embed_model", "_llm", "_node_parser", "_prompt_helper", "_tokenizer", "_transformations", "callback_manager", "chunk_overlap", "chunk_size", "context_window", "embed_model", "global_handler", "llm", "node_parser", "num_output", "prompt_helper", "pydantic_program_mode", "text_splitter", "tokenizer", "transformations"], "value": "_Settings(_llm=OpenAI(callback_manager=<llama_index.core.callbacks.base.CallbackManager object at 0x14631e010>, system_prompt=None, messages_to_prompt=<function messages_to_prompt at 0x13bf774c0>, completion_to_prompt=<function default_completion_to_prompt at 0x13c00fd80>, output_parser=None, pydantic_program_mode=<PydanticProgramMode.DEFAULT: 'default'>, query_wrapper_prompt=None, model='gpt-3.5-turbo', temperature=0.1, max_tokens=None, additional_kwargs={}, max_retries=3, timeout=60.0, default_headers=None, reuse_client=True, api_key='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', api_base='https://api.openai.com/v1', api_version=''), _embed_model=OpenAIEmbedding(model_name='text-embedding-3-small', embed_batch_size=100, callback_manager=<llama_index.core.callbacks.base.CallbackManager object at 0x14631e010>, additional_kwargs={}, api_key='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', api_base='https://api.openai.com/v1', api_version='', max_retries=10, timeout=60.0, ...", "root": "Settings", "propertyChain": [], "language": "python"}, {"name": "SimpleDirectoryReader", "type": "ABCMeta", "properties": ["_abc_impl", "_add_files", "_exclude_metadata", "is_hidden", "iter_data", "lazy_load_data", "load_data", "load_file", "load_langchain_documents", "supported_suffix_fn"], "value": "<class 'llama_index.core.readers.file.base.SimpleDirectoryReader'>", "root": "SimpleDirectoryReader", "propertyChain": [], "language": "python"}, {"name": "StorageContext", "type": "type", "properties": ["add_vector_store", "from_defaults", "from_dict", "persist", "to_dict", "vector_store"], "value": "<class 'llama_index.core.storage.storage_context.StorageContext'>", "root": "StorageContext", "propertyChain": [], "language": "python"}, {"name": "TitleExtractor", "type": "ModelMetaclass", "properties": ["Config", "_abc_impl", "_calculate_keys", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_value", "_init_private_attributes", "_iter", "acall", "aextract", "aprocess_nodes", "class_name", "construct", "copy", "dict", "extract", "extract_titles", "filter_nodes", "from_dict", "from_json", "from_orm", "get_title_candidates", "json", "parse_file", "parse_obj", "parse_raw", "process_nodes", "schema", "schema_json", "separate_nodes_by_ref_id", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "<class 'llama_index.core.extractors.metadata_extractors.TitleExtractor'>", "root": "TitleExtractor", "propertyChain": [], "language": "python"}, {"name": "TokenTextSplitter", "type": "ModelMetaclass", "properties": ["Config", "_abc_impl", "_calculate_keys", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_metadata_str", "_get_value", "_init_private_attributes", "_iter", "_merge", "_parse_nodes", "_split", "_split_fns", "_split_text", "_tokenizer", "_validate_id_func", "acall", "class_name", "construct", "copy", "dict", "from_defaults", "from_dict", "from_json", "from_orm", "get_nodes_from_documents", "json", "parse_file", "parse_obj", "parse_raw", "schema", "schema_json", "split_text", "split_text_metadata_aware", "split_texts", "split_texts_metadata_aware", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "<class 'llama_index.core.node_parser.text.token.TokenTextSplitter'>", "root": "TokenTextSplitter", "propertyChain": [], "language": "python"}, {"name": "VectorStoreIndex", "type": "ABCMeta", "properties": ["_abc_impl", "_add_nodes_to_index", "_aget_node_with_embedding", "_async_add_nodes_to_index", "_build_index_from_nodes", "_delete_node", "_get_node_with_embedding", "_insert", "_is_protocol", "as_chat_engine", "as_query_engine", "as_retriever", "build_index_from_nodes", "delete", "delete_nodes", "delete_ref_doc", "docstore", "from_documents", "from_vector_store", "index_id", "index_struct", "index_struct_cls", "insert", "insert_nodes", "ref_doc_info", "refresh", "refresh_ref_docs", "service_context", "set_index_id", "storage_context", "summary", "update", "update_ref_doc", "vector_store"], "value": "<class 'llama_index.core.indices.vector_store.base.VectorStoreIndex'>", "root": "VectorStoreIndex", "propertyChain": [], "language": "python"}, {"name": "WikipediaReader", "type": "ModelMetaclass", "properties": ["Config", "_abc_impl", "_calculate_keys", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_value", "_init_private_attributes", "_iter", "class_name", "construct", "copy", "dict", "from_dict", "from_json", "from_orm", "json", "lazy_load_data", "load_data", "load_langchain_documents", "parse_file", "parse_obj", "parse_raw", "schema", "schema_json", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "<class 'llama_index.readers.wikipedia.base.WikipediaReader'>", "root": "WikipediaReader", "propertyChain": [], "language": "python"}, {"name": "chroma_client", "type": "Client", "properties": ["_abc_impl", "_add", "_admin_client", "_count", "_create_system_if_not_exists", "_delete", "_get", "_get_identifier_from_settings", "_identifer_to_system", "_identifier", "_modify", "_peek", "_populate_data_from_system", "_query", "_server", "_system", "_update", "_upsert", "_validate_tenant_database", "clear_system_cache", "count_collections", "create_collection", "database", "delete_collection", "from_system", "get_collection", "get_or_create_collection", "get_settings", "get_version", "heartbeat", "list_collections", "max_batch_size", "reset", "set_database", "set_tenant", "tenant"], "value": "<chromadb.api.client.Client object at 0x1484d8b90>", "root": "chroma_client", "propertyChain": [], "language": "python"}, {"name": "chroma_collection", "type": "Collection", "properties": ["Config", "_abc_impl", "_calculate_keys", "_client", "_copy_and_set_values", "_data_loader", "_decompose_class", "_embed", "_embedding_function", "_enforce_dict_if_root", "_get_value", "_init_private_attributes", "_iter", "_normalize_embeddings", "_validate_embedding_set", "add", "construct", "copy", "count", "database", "delete", "dict", "from_orm", "get", "id", "json", "metadata", "modify", "name", "parse_file", "parse_obj", "parse_raw", "peek", "query", "schema", "schema_json", "tenant", "update", "update_forward_refs", "upsert", "validate"], "value": "name='dune-v0' id=UUID('f91a6aec-3672-4792-83e7-214e97aae45a') metadata=None tenant='default_tenant' database='default_database'", "root": "chroma_collection", "propertyChain": [], "language": "python"}, {"name": "chromadb", "type": "module", "properties": ["AdminAPI", "AdminClient", "AdminClientCreator", "Client", "ClientAPI", "ClientCreator", "CloudClient", "Collection", "CollectionMetadata", "DEFAULT_DATABASE", "DEFAULT_TENANT", "Dict", "Documents", "EmbeddingFunction", "Embeddings", "EphemeralClient", "GetResult", "HttpClient", "IDs", "IN_COLAB", "Include", "Metadata", "Optional", "PersistentClient", "QueryResult", "Settings", "TokenTransportHeader", "UpdateCollectionMetadata", "Where", "WhereDocument", "api", "auth", "chromadb", "config", "configure", "db", "errors", "get_settings", "ingest", "is_client", "logger", "logging", "migrations", "quota", "segment", "sqlite3", "telemetry", "types", "utils"], "value": "<module 'chromadb' from '/Users/arindam/anaconda3/envs/llmops-course/lib/python3.11/site-packages/chromadb/__init__.py'>", "root": "chromadb", "propertyChain": [], "language": "python"}, {"name": "getpass", "type": "module", "properties": ["GetPassWarning", "_raw_input", "contextlib", "fallback_getpass", "getpass", "getuser", "io", "os", "sys", "termios", "unix_getpass", "warnings", "win_getpass"], "value": "<module 'getpass' from '/Users/arindam/anaconda3/envs/llmops-course/lib/python3.11/getpass.py'>", "root": "getpass", "propertyChain": [], "language": "python"}, {"name": "index", "type": "VectorStoreIndex", "properties": ["_abc_impl", "_add_nodes_to_index", "_aget_node_with_embedding", "_async_add_nodes_to_index", "_build_index_from_nodes", "_callback_manager", "_delete_node", "_docstore", "_embed_model", "_get_node_with_embedding", "_graph_store", "_index_struct", "_insert", "_insert_batch_size", "_is_protocol", "_object_map", "_service_context", "_show_progress", "_storage_context", "_store_nodes_override", "_transformations", "_use_async", "_vector_store", "as_chat_engine", "as_query_engine", "as_retriever", "build_index_from_nodes", "delete", "delete_nodes", "delete_ref_doc", "docstore", "from_documents", "from_vector_store", "index_id", "index_struct", "index_struct_cls", "insert", "insert_nodes", "ref_doc_info", "refresh", "refresh_ref_docs", "service_context", "set_index_id", "storage_context", "summary", "update", "update_ref_doc", "vector_store"], "value": "<llama_index.core.indices.vector_store.base.VectorStoreIndex object at 0x148ab2bd0>", "root": "index", "propertyChain": [], "language": "python"}, {"name": "llama_index", "type": "module", "properties": ["callbacks", "core", "embeddings", "llms", "readers", "vector_stores"], "value": "<module 'llama_index' (<_frozen_importlib_external.NamespaceLoader object at 0x105eb1b10>)>", "root": "llama_index", "propertyChain": [], "language": "python"}, {"name": "load_index_from_storage", "type": "function", "properties": [], "value": "<function load_index_from_storage at 0x143affb00>", "root": "load_index_from_storage", "propertyChain": [], "language": "python"}, {"name": "logging", "type": "module", "properties": ["BASIC_FORMAT", "BufferingFormatter", "CRITICAL", "DEBUG", "ERROR", "FATAL", "FileHandler", "Filter", "Filterer", "Formatter", "GenericAlias", "Handler", "INFO", "LogRecord", "Logger", "LoggerAdapter", "Manager", "NOTSET", "NullHandler", "PercentStyle", "PlaceHolder", "RootLogger", "StrFormatStyle", "StreamHandler", "StringTemplateStyle", "Template", "WARN", "WARNING", "_STYLES", "_StderrHandler", "_acquireLock", "_addHandlerRef", "_after_at_fork_child_reinit_locks", "_at_fork_reinit_lock_weakset", "_checkLevel", "_defaultFormatter", "_defaultLastResort", "_handlerList", "_handlers", "_is_internal_frame", "_levelToName", "_lock", "_logRecordFactory", "_loggerClass", "_nameToLevel", "_register_at_fork_reinit_lock", "_releaseLock", "_removeHandlerRef", "_showwarning", "_srcfile", "_startTime", "_str_formatter", "_warnings_showwarning", "addLevelName", "atexit", "basicConfig", "captureWarnings", "collections", "config", "critical", "currentframe", "debug", "disable", "error", "exception", "fatal", "getLevelName", "getLevelNamesMapping", "getLogRecordFactory", "getLogger", "getLoggerClass", "handlers", "info", "io", "lastResort", "log", "logMultiprocessing", "logProcesses", "logThreads", "makeLogRecord", "os", "raiseExceptions", "re", "root", "setLogRecordFactory", "setLoggerClass", "shutdown", "sys", "threading", "time", "traceback", "warn", "warning", "warnings", "weakref"], "value": "<module 'logging' from '/Users/arindam/anaconda3/envs/llmops-course/lib/python3.11/logging/__init__.py'>", "root": "logging", "propertyChain": [], "language": "python"}, {"name": "movie", "type": "str", "value": "Dune: Part Two", "root": "movie", "propertyChain": [], "language": "python"}, {"name": "movie_list", "type": "list", "count": 2, "value": "['Dune (2021 film)', 'Dune: Part Two']", "root": "movie_list", "propertyChain": [], "language": "python"}, {"name": "nest_asyncio", "type": "module", "properties": ["_patch_asyncio", "_patch_loop", "_patch_policy", "_patch_tornado", "apply", "asyncio", "contextmanager", "events", "heappop", "os", "suppress", "sys", "threading"], "value": "<module 'nest_asyncio' from '/Users/arindam/anaconda3/envs/llmops-course/lib/python3.11/site-packages/nest_asyncio.py'>", "root": "nest_asyncio", "propertyChain": [], "language": "python"}, {"name": "node", "type": "TextNode", "properties": ["Config", "_abc_impl", "_calculate_keys", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_value", "_init_private_attributes", "_iter", "as_related_node_info", "child_nodes", "class_name", "construct", "copy", "dict", "embedding", "end_char_idx", "excluded_embed_metadata_keys", "excluded_llm_metadata_keys", "extra_info", "from_dict", "from_json", "from_orm", "get_content", "get_embedding", "get_metadata_str", "get_node_info", "get_text", "get_type", "hash", "id_", "json", "metadata", "metadata_seperator", "metadata_template", "next_node", "node_id", "node_info", "parent_node", "parse_file", "parse_obj", "parse_raw", "prev_node", "ref_doc_id", "relationships", "schema", "schema_json", "set_content", "source_node", "start_char_idx", "text", "text_template", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "Node ID: c2b17ec5-e8d0-48e6-914d-9f1e946aa642\nText: a contrasting view of the film's religious inspirations, noting\nthat the film draws from a number of Abrahamic religions for the\npurpose of critiquing faith itself.   === Accolades === The trailer\nfor Dune: Part Two received nominations for Best Fantasy Adventure and\nthe Don LaFontaine Award for Best Voice Over at the 2023 Golden\nTrailer Awards....", "root": "node", "propertyChain": [], "language": "python"}, {"name": "nodes", "type": "list", "count": 22, "value": "[TextNode(id_='2eb7e668-7c20-4342-b625-533c73c26d5f', embedding=None, metadata={'title': 'Dune: Part Two'}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={<NodeRelationship.SOURCE: '1'>: RelatedNodeInfo(node_id='52659577', node_type=<ObjectType.DOCUMENT: '4'>, metadata={}, hash='1beb3455b1aabd738daef8a7aa1839b69b5998061b1279e6653d377e8e127a02'), <NodeRelationship.NEXT: '3'>: RelatedNodeInfo(node_id='4e69a488-36d1-4928-bf0e-7704b4832d5a', node_type=<ObjectType.TEXT: '1'>, metadata={}, hash='c81ebdfff07a9f7782c5fb01ada609c11b725c5e27d600c25734f79d4b99ad35')}, text='Dune (titled onscreen as Dune: Part One) is a 2021 American epic science fiction film directed and co-produced by Denis Villeneuve, who co-wrote the screenplay with Jon Spaihts and Eric Roth. It is the first of a two-part adaptation of the 1965 novel of the same name by Frank Herbert. Set in the distant future, the film follows Paul Atreides as his family, the noble House Atreides, is thrust in...", "root": "nodes", "propertyChain": [], "language": "python"}, {"name": "os", "type": "module", "properties": ["CLD_CONTINUED", "CLD_DUMPED", "CLD_EXITED", "CLD_KILLED", "CLD_STOPPED", "CLD_TRAPPED", "DirEntry", "EX_CANTCREAT", "EX_CONFIG", "EX_DATAERR", "EX_IOERR", "EX_NOHOST", "EX_NOINPUT", "EX_NOPERM", "EX_NOUSER", "EX_OK", "EX_OSERR", "EX_OSFILE", "EX_PROTOCOL", "EX_SOFTWARE", "EX_TEMPFAIL", "EX_UNAVAILABLE", "EX_USAGE", "F_LOCK", "F_OK", "F_TEST", "F_TLOCK", "F_ULOCK", "GenericAlias", "Mapping", "MutableMapping", "NGROUPS_MAX", "O_ACCMODE", "O_APPEND", "O_ASYNC", "O_CLOEXEC", "O_CREAT", "O_DIRECTORY", "O_DSYNC", "O_EVTONLY", "O_EXCL", "O_EXLOCK", "O_FSYNC", "O_NDELAY", "O_NOCTTY", "O_NOFOLLOW", "O_NONBLOCK", "O_RDONLY", "O_RDWR", "O_SHLOCK", "O_SYMLINK", "O_SYNC", "O_TRUNC", "O_WRONLY", "POSIX_SPAWN_CLOSE", "POSIX_SPAWN_DUP2", "POSIX_SPAWN_OPEN", "PRIO_PGRP", "PRIO_PROCESS", "PRIO_USER", "P_ALL", "P_NOWAIT", "P_NOWAITO", "P_PGID", "P_PID", "P_WAIT", "PathLike", "RTLD_GLOBAL", "RTLD_LAZY", "RTLD_LOCAL", "RTLD_NODELETE", "RTLD_NOLOAD", "RTLD_NOW", "R_OK", "SCHED_FIFO", "SCHED_OTHER", "SCHED_RR", "SEEK_CUR", "SEEK_DATA", "SEEK_END", "SEEK_HOLE", "SEEK_SET", "ST_NOSUID", "ST_RDONLY", "TMP_MAX", "WCONTINUED", "WCOREDUMP", "WEXITED", "WEXITSTATUS", "WIFCONTINUED", "WIFEXITED", "WIFSIGNALED", "WIFSTOPPED", "WNOHANG", "WNOWAIT", "WSTOPPED", "WSTOPSIG", "WTERMSIG", "WUNTRACED", "W_OK", "X_OK", "_Environ", "_check_methods", "_execvpe", "_exists", "_exit", "_fspath", "_fwalk", "_get_exports_list", "_spawnvef", "_walk", "_wrap_close", "abc", "abort", "access", "altsep", "chdir", "chflags", "chmod", "chown", "chroot", "close", "closerange", "confstr", "confstr_names", "cpu_count", "ctermid", "curdir", "defpath", "device_encoding", "devnull", "dup", "dup2", "environ", "environb", "error", "execl", "execle", "execlp", "execlpe", "execv", "execve", "execvp", "execvpe", "extsep", "fchdir", "fchmod", "fchown", "fdopen", "fork", "forkpty", "fpathconf", "fsdecode", "fsencode", "fspath", "fstat", "fstatvfs", "fsync", "ftruncate", "fwalk", "get_blocking", "get_exec_path", "get_inheritable", "get_terminal_size", "getcwd", "getcwdb", "getegid", "getenv", "getenvb", "geteuid", "getgid", "getgrouplist", "getgroups", "getloadavg", "getlogin", "getpgid", "getpgrp", "getpid", "getppid", "getpriority", "getsid", "getuid", "initgroups", "isatty", "kill", "killpg", "lchflags", "lchmod", "lchown", "linesep", "link", "listdir", "lockf", "login_tty", "lseek", "lstat", "major", "makedev", "makedirs", "minor", "mkdir", "mkfifo", "mknod", "name", "nice", "open", "openpty", "pardir", "path", "pathconf", "pathconf_names", "pathsep", "pipe", "popen", "posix_spawn", "posix_spawnp", "pread", "putenv", "pwrite", "read", "readlink", "readv", "register_at_fork", "remove", "removedirs", "rename", "renames", "replace", "rmdir", "scandir", "sched_get_priority_max", "sched_get_priority_min", "sched_yield", "sendfile", "sep", "set_blocking", "set_inheritable", "setegid", "seteuid", "setgid", "setgroups", "setpgid", "setpgrp", "setpriority", "setregid", "setreuid", "setsid", "setuid", "spawnl", "spawnle", "spawnlp", "spawnlpe", "spawnv", "spawnve", "spawnvp", "spawnvpe", "st", "stat", "stat_result", "statvfs", "statvfs_result", "strerror", "supports_bytes_environ", "supports_dir_fd", "supports_effective_ids", "supports_fd", "supports_follow_symlinks", "symlink", "sync", "sys", "sysconf", "sysconf_names", "system", "tcgetpgrp", "tcsetpgrp", "terminal_size", "times", "times_result", "truncate", "ttyname", "umask", "uname", "uname_result", "unlink", "unsetenv", "urandom", "utime", "wait", "wait3", "wait4", "waitpid", "waitstatus_to_exitcode", "walk", "write", "writev"], "value": "<module 'os' (frozen)>", "root": "os", "propertyChain": [], "language": "python"}, {"name": "pipeline", "type": "IngestionPipeline", "properties": ["Config", "_abc_impl", "_ahandle_duplicates", "_ahandle_upserts", "_calculate_keys", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_default_transformations", "_get_value", "_handle_duplicates", "_handle_upserts", "_init_private_attributes", "_iter", "_node_batcher", "_prepare_inputs", "api_key", "app_url", "arun", "base_url", "cache", "construct", "copy", "dict", "disable_cache", "docstore", "docstore_strategy", "documents", "from_orm", "from_pipeline_name", "json", "load", "name", "parse_file", "parse_obj", "parse_raw", "persist", "project_name", "readers", "register", "run", "run_remote", "schema", "schema_json", "transformations", "update_forward_refs", "validate", "vector_store"], "value": "name='default' project_name='default' transformations=[TokenTextSplitter(include_metadata=True, include_prev_next_rel=True, callback_manager=<llama_index.core.callbacks.base.CallbackManager object at 0x145b500d0>, id_func=<function default_id_func at 0x13c033880>, chunk_size=1024, chunk_overlap=20, separator=' ', backup_separators=['\\n'])] documents=None readers=None vector_store=None cache=IngestionCache(collection='llama_cache', cache=<llama_index.core.storage.kvstore.simple_kvstore.SimpleKVStore object at 0x148537e50>, nodes_key='nodes') docstore=None docstore_strategy=<DocstoreStrategy.UPSERTS: 'upserts'> disable_cache=False base_url='https://api.cloud.llamaindex.ai' app_url='https://cloud.llamaindex.ai' api_key=None", "root": "pipeline", "propertyChain": [], "language": "python"}, {"name": "set_global_handler", "type": "function", "properties": [], "value": "<function set_global_handler at 0x13bf21da0>", "root": "set_global_handler", "propertyChain": [], "language": "python"}, {"name": "storage_context", "type": "StorageContext", "properties": ["add_vector_store", "docstore", "from_defaults", "from_dict", "graph_store", "index_store", "persist", "to_dict", "vector_store", "vector_stores"], "value": "StorageContext(docstore=<llama_index.core.storage.docstore.simple_docstore.SimpleDocumentStore object at 0x105eb0d50>, index_store=<llama_index.core.storage.index_store.simple_index_store.SimpleIndexStore object at 0x148a88850>, vector_stores={'image': <llama_index.core.vector_stores.simple.SimpleVectorStore object at 0x1494f4890>}, graph_store=<llama_index.core.graph_stores.simple.SimpleGraphStore object at 0x1485fec90>)", "root": "storage_context", "propertyChain": [], "language": "python"}, {"name": "sys", "type": "module", "properties": ["_base_executable", "_clear_type_cache", "_current_exceptions", "_current_frames", "_debugmallocstats", "_framework", "_getframe", "_getquickenedcount", "_git", "_home", "_stdlib_dir", "_xoptions", "abiflags", "addaudithook", "api_version", "argv", "audit", "base_exec_prefix", "base_prefix", "breakpointhook", "builtin_module_names", "byteorder", "call_tracing", "copyright", "displayhook", "dont_write_bytecode", "exc_info", "excepthook", "exception", "exec_prefix", "executable", "exit", "flags", "float_info", "float_repr_style", "get_asyncgen_hooks", "get_coroutine_origin_tracking_depth", "get_int_max_str_digits", "getallocatedblocks", "getdefaultencoding", "getdlopenflags", "getfilesystemencodeerrors", "getfilesystemencoding", "getprofile", "getrecursionlimit", "getrefcount", "getsizeof", "getswitchinterval", "gettrace", "hash_info", "hexversion", "implementation", "int_info", "intern", "is_finalizing", "maxsize", "maxunicode", "meta_path", "modules", "orig_argv", "path", "path_hooks", "path_importer_cache", "platform", "platlibdir", "prefix", "ps1", "ps2", "ps3", "pycache_prefix", "set_asyncgen_hooks", "set_coroutine_origin_tracking_depth", "set_int_max_str_digits", "setdlopenflags", "setprofile", "setrecursionlimit", "setswitchinterval", "settrace", "stderr", "stdin", "stdlib_module_names", "stdout", "thread_info", "unraisablehook", "version", "version_info", "warnoptions"], "value": "<module 'sys' (built-in)>", "root": "sys", "propertyChain": [], "language": "python"}, {"name": "vector_store", "type": "ChromaVectorStore", "properties": ["Config", "_abc_impl", "_calculate_keys", "_collection", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get", "_get_value", "_init_private_attributes", "_iter", "_query", "add", "adelete", "aquery", "async_add", "class_name", "client", "collection_kwargs", "collection_name", "construct", "copy", "delete", "dict", "flat_metadata", "from_collection", "from_dict", "from_json", "from_orm", "from_params", "headers", "host", "is_embedding_query", "json", "parse_file", "parse_obj", "parse_raw", "persist", "persist_dir", "port", "query", "schema", "schema_json", "ssl", "stores_text", "to_dict", "to_json", "update_forward_refs", "validate"], "value": "stores_text=True is_embedding_query=True flat_metadata=True collection_name=None host=None port=None ssl=False headers=None persist_dir=None collection_kwargs={}", "root": "vector_store", "propertyChain": [], "language": "python"}, {"name": "wandb_callback", "type": "WandbCallbackHandler", "properties": ["_IndexType", "_abc_impl", "_add_payload_to_span", "_build_trace_tree", "_convert_event_pair_to_wb_span", "_cur_trace_id", "_end_time", "_ensure_run", "_event_pairs_by_id", "_get_time_in_ms", "_handle_embedding_payload", "_handle_llm_payload", "_handle_node_parsing_payload", "_handle_query_payload", "_map_event_type_to_span_kind", "_print_upload_index_fail_message", "_print_wandb_init_message", "_run_args", "_start_time", "_token_counter", "_trace_map", "_trace_tree", "_upload_index_as_wb_artifact", "_wandb", "end_trace", "event_ends_to_ignore", "event_starts_to_ignore", "finish", "load_storage_context", "log_trace_tree", "on_event_end", "on_event_start", "persist_index", "start_trace", "tokenizer"], "value": "<llama_index.callbacks.wandb.base.WandbCallbackHandler object at 0x140472e10>", "root": "wandb_callback", "propertyChain": [], "language": "python"}, {"name": "wiki_doc", "type": "Document", "properties": ["Config", "_abc_impl", "_calculate_keys", "_compat_fields", "_copy_and_set_values", "_decompose_class", "_enforce_dict_if_root", "_get_value", "_init_private_attributes", "_iter", "as_related_node_info", "child_nodes", "class_name", "construct", "copy", "dict", "doc_id", "embedding", "end_char_idx", "example", "excluded_embed_metadata_keys", "excluded_llm_metadata_keys", "extra_info", "from_dict", "from_embedchain_format", "from_haystack_format", "from_json", "from_langchain_format", "from_orm", "from_semantic_kernel_format", "get_content", "get_doc_id", "get_embedding", "get_metadata_str", "get_node_info", "get_text", "get_type", "hash", "id_", "json", "metadata", "metadata_seperator", "metadata_template", "next_node", "node_id", "node_info", "parent_node", "parse_file", "parse_obj", "parse_raw", "prev_node", "ref_doc_id", "relationships", "schema", "schema_json", "set_content", "source_node", "start_char_idx", "text", "text_template", "to_dict", "to_embedchain_format", "to_haystack_format", "to_json", "to_langchain_format", "to_semantic_kernel_format", "to_vectorflow", "update_forward_refs", "validate"], "value": "Doc ID: 63790171\nText: Dune: Part Two is a 2024 American epic science fiction film\ndirected and produced by Denis Villeneuve, who co-wrote the screenplay\nwith Jon Spaihts. The sequel to Dune (2021) adapts the 1965 novel Dune\nby Frank Herbert and follows Paul Atreides as he unites with the\nFremen people of the desert planet Arrakis to wage war against House\nHarkonnen. ...", "root": "wiki_doc", "propertyChain": [], "language": "python"}, {"name": "wiki_docs", "type": "list", "count": 2, "value": "[Document(id_='52659577', embedding=None, metadata={}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, text='Dune (titled onscreen as Dune: Part One) is a 2021 American epic science fiction film directed and co-produced by Denis Villeneuve, who co-wrote the screenplay with Jon Spaihts and Eric Roth. It is the first of a two-part adaptation of the 1965 novel of the same name by Frank Herbert. Set in the distant future, the film follows Paul Atreides as his family, the noble House Atreides, is thrust into a war for the deadly and inhospitable desert planet Arrakis. The ensemble cast includes Timoth\u00e9e Chalamet, Rebecca Ferguson, Oscar Isaac, Josh Brolin, Stellan Skarsg\u00e5rd, Dave Bautista, Stephen McKinley Henderson, Zendaya, Chang Chen, Sharon Duncan-Brewster, Charlotte Rampling, Jason Momoa, and Javier Bardem.\\nThe film is the third adaptation of Dune, following David Lynch\\'s 1984 film and John Harrison\\'s 2000 television miniseries. After an unsuccessf...", "root": "wiki_docs", "propertyChain": [], "language": "python"}]
Added user message to memory: Who starred in the 2021 film?
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: semantic-film-info with args: {"query":"cast of the 2021 film","filter_key_list":["title"],"filter_value_list":["Dune (2021 film)"]}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The cast of the 2021 film "Dune" includes Timothée Chalamet, Rebecca Ferguson, Dave Bautista, Stellan Skarsgård, Charlotte Rampling, Oscar Isaac, Zendaya, Javier Bardem, Josh Brolin, Jason Momoa, David Dastmalchian, Stephen McKinley Henderson, Chang Chen, Benjamin Clementine, Sharon Duncan-Brewster, Christopher Walken, Léa Seydoux, Souheila Yacoub, Tim Blake Nelson, and Anya Taylor-Joy.
========================
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
The 2021 film "Dune" starred Timothée Chalamet, Rebecca Ferguson, Dave Bautista, Stellan Skarsgård, Charlotte Rampling, Oscar Isaac, Zendaya, Javier Bardem, Josh Brolin, Jason Momoa, David Dastmalchian, Stephen McKinley Henderson, Chang Chen, Benjamin Clementine, Sharon Duncan-Brewster, Christopher Walken, Léa Seydoux, Souheila Yacoub, Tim Blake Nelson, and Anya Taylor-Joy.
--2024-03-11 22:32:26--  https://raw.githubusercontent.com/AI-Maker-Space/DataRepository/main/dune1.csv
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 2606:50c0:8000::154, 2606:50c0:8001::154, 2606:50c0:8002::154, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|2606:50c0:8000::154|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 133391 (130K) [text/plain]
Saving to: ‘dune1.csv’
dune1.csv           100%[===================>] 130.26K  --.-KB/s    in 0.03s
2024-03-11 22:32:27 (4.39 MB/s) - ‘dune1.csv’ saved [133391/133391]
--2024-03-11 22:32:40--  https://raw.githubusercontent.com/AI-Maker-Space/DataRepository/main/dune2.csv
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 2606:50c0:8000::154, 2606:50c0:8001::154, 2606:50c0:8002::154, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|2606:50c0:8000::154|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 111843 (109K) [text/plain]
Saving to: ‘dune2.csv’
dune2.csv           100%[===================>] 109.22K  --.-KB/s    in 0.03s
2024-03-11 22:32:40 (3.62 MB/s) - ‘dune2.csv’ saved [111843/111843]
Added user message to memory: What is the average rating of the 2nd Dune movie?
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: sql-query with args: {"input":"Dune: Part 2"}
INFO:llama_index.core.indices.struct_store.sql_retriever:> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The sequel to Dune, titled Dune: Part 2, has received a mix of reviews from viewers. While some have praised it as a continuation of the epic story with elements of hope and tragedy, others have found it to be overrated, confusing, and lacking in substance. Some viewers have expressed disappointment in the editing and pacing of the film, feeling that it falls short of the expectations set by the first part. Overall, opinions on Dune: Part 2 vary, with some viewers feeling that it does not live up to the hype surrounding it.
========================
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
The reviews for the 2nd Dune movie, titled Dune: Part 2, are mixed. Some viewers have praised it as a continuation of the epic story with elements of hope and tragedy, while others have found it to be overrated, confusing, and lacking in substance. The average rating for Dune: Part 2 is not available.
Added user message to memory: What is the average rating of the 2nd Dune movie?
INFO:openai._base_client:Retrying request to /chat/completions in 0.796164 seconds
Retrying request to /chat/completions in 0.796164 seconds
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: sql-query with args: {"input":"Dune: Part 2"}
INFO:llama_index.core.indices.struct_store.sql_retriever:> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The sequel to Dune, titled Dune: Part 2, has received overwhelmingly positive reviews from viewers, with many praising it as a cinematic triumph and a must-see experience. However, there are some mixed opinions among viewers, with some expressing disappointment in the film's pacing and storytelling compared to the first part. Despite this, director Denis Villeneuve's work on the film has been commended, and fans are still excited for the continuation of the story. Overall, the response to Dune: Part 2 remains largely favorable, with viewers acknowledging its strengths while also noting areas for improvement.
========================
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
The average rating of the 2nd Dune movie, titled Dune: Part 2, is not available. However, the movie has received overwhelmingly positive reviews from viewers, with many praising it as a cinematic triumph and a must-see experience.
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
Added user message to memory: What is the average numeric rating of the 2nd Dune movie?
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: sql-query with args: {"input":"Dune: Part 2"}
INFO:llama_index.core.indices.struct_store.sql_retriever:> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The sequel to Dune seems to have received a mix of reviews, with some viewers praising it as a continuation of the epic story while others expressing disappointment in its execution. While some viewers found it to be a good continuation with elements of hope and tragedy, others felt that it was overrated, confusing, and lacking in substance. There were also criticisms about the pacing, with some feeling that it was rushed compared to the first part. Overall, opinions on Dune: Part 2 seem to be divided, with some viewers eagerly anticipating the next installment while others were left wanting more.
========================
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
The average numeric rating of the 2nd Dune movie, titled Dune: Part 2, is not available. The reviews for the movie are mixed, with some viewers praising it as a continuation of the epic story while others expressing disappointment in its execution.
Added user message to memory: What is the average numeric rating of the 2nd Dune movie?
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: sql-query with args: {"input":"SELECT AVG(rating) AS average_rating FROM 'Dune: Part 2'"}
INFO:llama_index.core.indices.struct_store.sql_retriever:> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The average rating for 'Dune: Part 2' is approximately 8.71.
========================
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
The average numeric rating of the 2nd Dune movie, Dune: Part 2, is approximately 8.71.
Added user message to memory: What is the lowest rating of the 1st film?
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: sql-query with args: {"input":"SELECT MIN(rating) AS lowest_rating FROM 'Dune (2021 film)'","filter_key_list":[],"filter_value_list":[]}
INFO:llama_index.core.indices.struct_store.sql_retriever:> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The lowest rating for the movie "Dune (2021 film)" is 1.0.
========================
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
The lowest rating of the 1st film "Dune (2021 film)" is 1.0.
Added user message to memory: What planet does the 1st Dune movie take place on?
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: semantic-film-info with args: {"query":"planet where the 1st Dune movie takes place","filter_key_list":["title"],"filter_value_list":["Dune (2021 film)"]}
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: Arrakis
========================
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
The 1st Dune movie, "Dune (2021 film)", takes place on the planet Arrakis.
Added user message to memory: Calculate the average review of each movie - and then discuss how the average review changed over time.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
=== Calling Function ===
Calling function: sql-query with args: {"input": "SELECT AVG(rating) AS average_review FROM 'Dune (2021 film)'", "filter_key_list": [], "filter_value_list": []}
INFO:llama_index.core.indices.struct_store.sql_retriever:> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The average rating for the movie "Dune (2021 film)" is 8.34 out of 10.
========================
=== Calling Function ===
Calling function: sql-query with args: {"input": "SELECT AVG(rating) AS average_review FROM 'Dune: Part 2'", "filter_key_list": [], "filter_value_list": []}
INFO:llama_index.core.indices.struct_store.sql_retriever:> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
> Table desc str: Table 'Dune (2021 film)' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
Table 'Dune: Part 2' has columns: index (BIGINT), Unnamed: 0 (BIGINT), Review_Date (TEXT), Author (TEXT), Rating (FLOAT), Review_Title (TEXT), Review (TEXT), Review_Url (TEXT), and foreign keys: .
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
Got output: The average rating for 'Dune: Part 2' is approximately 8.71 out of 10.
========================
[34m[1mwandb[39m[22m: Logged trace tree to W&B.
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
The average review ratings for the movies are as follows:
- "Dune (2021 film)": 8.34 out of 10
- "Dune: Part 2": 8.71 out of 10
Discussing how the average review changed over time:
- The average review rating for "Dune (2021 film)" is slightly lower compared to "Dune: Part 2", indicating a positive trend in the reception of the sequel.
- The increase in the average review rating from the first movie to the second movie suggests that the audience may have found the sequel more appealing or engaging.